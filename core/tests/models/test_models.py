# Project: drf-internal-cookiecutter
#       |\      _,,,---,,_
# ZZZzz /,`.-'`'    -.  ;-;;,_
#      |,4-  ) )-,_. ,\ (  `'-'
#     '---''(_/--'  `-'\_)
#           @Rakanhf
#           Rakan Farhouda
#


from django.test import TestCase
from django.contrib.auth import get_user_model
from django.db.utils import IntegrityError
from django.utils import timezone
from datetime import timedelta
from core.models import UserDevice, ExpiringToken

User = get_user_model()


class UserManagerTest(TestCase):
    def test_create_user(self):
        user = User.objects.create_user(email="testuser@test.com", password="testpass")
        self.assertEqual(User.objects.count(), 1)
        self.assertEqual(user.email, "testuser@test.com")
        self.assertTrue(user.check_password("testpass"))

    def test_create_user_without_email(self):
        with self.assertRaises(ValueError):
            User.objects.create_user(email=None, password="testpass")

    def test_create_superuser(self):
        superuser = User.objects.create_superuser(
            email="superuser@test.com", password="testpass"
        )
        self.assertTrue(superuser.is_staff)
        self.assertTrue(superuser.is_superuser)


class UserModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(
            email="testuser@test.com", password="testpass"
        )

    def test_delete(self):
        self.user.delete()
        self.assertEqual(User.objects.count(), 0)

    def test_str(self):
        self.user.first_name = "Test"
        self.user.last_name = "User"
        self.assertEqual(str(self.user), "Test User")

    def test_generate_and_delete_temporary_token(self):
        self.user.generate_temporary_token()
        self.assertTrue(ExpiringToken.objects.filter(user=self.user).exists())
        self.user.delete_temporary_token()
        self.assertFalse(ExpiringToken.objects.filter(user=self.user).exists())


class UserDeviceModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(
            email="testuser@test.com", password="testpass"
        )
        self.device = UserDevice.objects.create(
            user=self.user, user_agent="test_agent", ip_address="127.0.0.1"
        )

    def test_unique_together(self):
        with self.assertRaises(IntegrityError):
            UserDevice.objects.create(
                user=self.user, user_agent="test_agent", ip_address="127.0.0.1"
            )


class ExpiringTokenModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(
            email="testuser@test.com", password="testpass"
        )
        self.token = ExpiringToken.objects.create(user=self.user)

    def test_key_autogenerated_on_save(self):
        self.assertIsNotNone(self.token.key)

    def test_is_expired_unchangeable(self):
        self.token.expires_at = timezone.now() - timedelta(hours=1)
        self.token.save()
        self.assertFalse(self.token.is_expired)
